package puzzles.common.solver;

import java.util.*;

/**
 * Class for solving the best path for a given Configuration using breadth first search.
 *
 * @author Ethan Hartman (theeman05)
 */
public class Solver{
    /** The last count of total and unique configs generated by this Solver */
    private int lastTotalConfigs, lastUniqueConfigs;

    /**
     * Return the shortest path for solving a Configuration.
     *
     * @param start the beginning configuration
     * @return the shortest path for solving the given Configuration.
     */
    public List<Configuration> buildPathBFS(Configuration start){
        Map<Configuration, Configuration> predecessor = new HashMap<>();
        predecessor.put(start, null);
        Queue<Configuration> toVisit = new LinkedList<>();
        toVisit.offer(start);

        lastTotalConfigs = lastUniqueConfigs = 1;
        while (!toVisit.isEmpty() && !toVisit.peek().isSolution()) { // Loop until a solution is or isn't found
            Configuration curConfig = toVisit.remove();
            for (Configuration nbr : curConfig.getNeighbors()){
                if (!predecessor.containsKey(nbr)){
                    predecessor.put(nbr, curConfig); // Add new possible neighbors
                    toVisit.offer(nbr);
                    lastUniqueConfigs++;
                }
                lastTotalConfigs++;
            }
        }

        List<Configuration> path = null;
        if (!toVisit.isEmpty()) {
            // Construct the path
            path = new LinkedList<>();
            path.add(0, toVisit.peek());
            Configuration cur = predecessor.get(toVisit.peek());
            while (cur != null){
                path.add(0, cur); // Reverse direction start -> finish
                cur = predecessor.get(cur);
            }
        }
        return path;
    }

    /** @return the last total number of configs of the Solver */
    public int getLastTotalConfigs(){
        return lastTotalConfigs;
    }

    /** @return the last unique number of configs of the Solver */
    public int getLastUniqueConfigs(){
        return lastUniqueConfigs;
    }
}
